from xml.etree.ElementTree import Element, SubElement, Comment, tostring
import datetime
from xml.etree import ElementTree
from xml.dom import minidom
import json

def prettify(elem):
    """Return a pretty-printed XML string for the Element.
    """
    rough_string = ElementTree.tostring(elem, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent="  ")

#Function to Extract values given a key
def json_extract(obj, key):
    arr = []
    def extract(obj, arr, key):
        """Recursively search for values of key in JSON tree."""
        if isinstance(obj, dict):
            for k, v in obj.items():
                if isinstance(v, (dict, list)):
                    extract(v, arr, key)
                elif k == key:
                    arr.append(v)
        elif isinstance(obj, list):
            for item in obj:
                extract(item, arr, key)
        return arr
    values = extract(obj, arr, key)
    return values

urlset = Element('urlset')
comment = Comment('Generated by Moctar Sitemap Generator')
urlset.append(comment)

#Open hte saved json file
personInfo = {}
personInfo['person'] = []
with open('personInfo.json', 'r+', encoding='utf-8') as f:
	try:
		personInfo = json.load(f)
		for pers in personInfo['person']:
			url = SubElement(urlset, 'url')
			loc = SubElement(url, 'loc')
			loc.text = pers['url']
			lastmod = SubElement(url, 'lastmod')
			lastmod.text = str(datetime.datetime.today().strftime("%Y-%m-%dT%H:%M:%S+00:00"))
			priority = SubElement(url, 'priority')
			priority.text = '0.80'
	except Exception as e:
		print('No data in file or no file')
print (prettify(urlset))
text_file = open("sitemap.xml", "w")
text_file.write(prettify(urlset))
text_file.close()
